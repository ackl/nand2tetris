/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // If zx is set, zero out the x bus
    Mux16(a=x, b=false, sel=zx, out=x1);

    // Calculate negation of x
    Not16(in=x1, out=notx);

    // Select x or negation of x
    Mux16(a=x1, b=notx, sel=nx, out=xFinal);

    // Do same for bus of y bits
    Mux16(a=y, b=false, sel=zy, out=y1);
    Not16(in=y1, out=noty);
    Mux16(a=y1, b=noty, sel=ny, out=yFinal);

    // Calculate result of the two functions
    And16(a=xFinal, b=yFinal, out=fxyAnd);
    Add16(a=xFinal, b=yFinal, out=fxyAdd);

    // Choose which result to output based on f bit
    Mux16(a=fxyAnd, b=fxyAdd, sel=f, out=fxyResult);

    // Calculate negation of result
    Not16(in=fxyResult, out=notFxyResult);

    // Choose which result to output and hold the result
    Mux16(a=fxyResult, b=notFxyResult, sel=no, out=result);

    // Check most significant bit to see if negative number
    And16(a=result, b=true, out[15]=ng, out[0..14]=ignore);

    // Check if result is zero
    Or16Way(in=result, out=notZero);
    Not(in=notZero, out=zr);

    // Output result to out pin
    Or16(a=result, b=false, out=out);
}